#![allow(dead_code)]

////////////////////////////////////////////////////////////////////////////////////////////////////
pub struct BlockOutput<T> {
  value: T,
}
////////////////////////////////////////////////////////////////////////////////////////////////////
impl<T> BlockOutput<T> {
  pub fn read(&self) -> &T {
    &self.value
  }

  pub fn set(&mut self, value: T) {
    self.value = value;
  }

  pub fn new(value: T) -> Self {
    BlockOutput { value }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pub trait Block {
  fn step(&mut self);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
struct Adder<'a, T> {
  left_addend: &'a BlockOutput<T>,
  right_addend: &'a BlockOutput<T>,
}
////////////////////////////////////////////////////////////////////////////////////////////////////
impl<'a, T> Adder<'a, T> {
  pub fn new(left_addend: &'a BlockOutput<T>, right_addend: &'a BlockOutput<T>) -> Self {
    Adder {
      left_addend,
      right_addend,
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
struct RiseCounter<'a> {
  source: &'a BlockOutput<bool>,
  last_state: bool,
  count: usize,
}
////////////////////////////////////////////////////////////////////////////////////////////////////
impl<'a> RiseCounter<'a> {
  fn new(source: &'a BlockOutput<bool>) -> Self {
    RiseCounter {
      source,
      last_state: false,
      count: 0,
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////////////////
impl<'a> Block for RiseCounter<'a> {
  fn step(&mut self) {
    let read = *self.source.read();
    if read {
      self.count += 1;
    }
    self.last_state = read;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////
struct RisingTrigger<'a> {
  source: &'a BlockOutput<bool>,
  last_state: bool,
}
////////////////////////////////////////////////////////////////////////////////////////////////////
impl<'a> RisingTrigger<'a> {
  fn new(source: &'a BlockOutput<bool>) -> Self {
    RisingTrigger {
      source,
      last_state: false,
    }
  }
}
