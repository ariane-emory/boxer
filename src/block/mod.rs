#![allow(dead_code)]

////////////////////////////////////////////////////////////////////////////////////////////////////
pub trait BlockOutput<T> {
  fn read(&self) -> T;
}

////////////////////////////////////////////////////////////////////////////////////////////////////
pub trait Block {
  fn step(&mut self);
}

////////////////////////////////////////////////////////////////////////////////////////////////////
struct Adder<'a, T> {
  left_addend: &'a dyn BlockOutput<T>,
  right_addend: &'a dyn BlockOutput<T>,
}

////////////////////////////////////////////////////////////////////////////////////////////////////
impl<'a, T> Adder<'a, T> {
  fn new(left_addend: &'a dyn BlockOutput<T>, right_addend: &'a dyn BlockOutput<T>) -> Self {
    Adder {
      left_addend,
      right_addend,
    }
  }
}
